<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task"  
	
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-4.1.xsd 
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd 
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
						http://www.springframework.org/schema/task 
      					http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<context:annotation-config />   
	<context:component-scan base-package="com.controller"  /><!-- 自动扫描所有注解该路径 -->
	<context:component-scan base-package="com.service" /><!-- 自动扫描所有注解该路径 -->
	<context:component-scan base-package="com.dao" /><!-- 自动扫描所有注解该路径 -->    
	
	<!-- 自动扫描的包名 -->    
	 <context:component-scan base-package="com.util" />
     <!-- task任务扫描注解 -->  
	 <task:annotation-driven/>
     
     
	
	<!-- 配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" /> 
 	</bean> 
	 
 	   
     <!-- 配置数据源  org.springframework.jdbc.datasource.DriverManagerDataSource  -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"  init-method="init" destroy-method="close" >   
		<!--  
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />   
		<property name="url" value="jdbc:mysql://localhost:3306/cmp_adv" />   
		<property name="username" value="ypcn" />   
		<property name="password" value="ypcn" />
		-->
		 <property name="driverClassName" value="${jdbc.driverClassName}" /> 
     	 <property name="url" value="${jdbc.url}" /> 
     	 <property name="username" value="${jdbc.username}" /> 
     	 <property name="password" value="${jdbc.password}" />   
     	 <property name="initialSize" value="${jdbc.minPoolSize}" />
         <property name="minIdle" value="${jdbc.minPoolSize}" />
         <property name="maxActive" value="${jdbc.maxPoolSize}" /> 
          <!-- 配置获取连接等待超时的时间 -->

        <property name="maxWait" value="60000" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->

        <property name="timeBetweenEvictionRunsMillis" value="60000" />
          <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->

        <property name="minEvictableIdleTimeMillis" value="300000" />
         <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />

        <property name="maxPoolPreparedStatementPerConnectionSize"  value="20" />
	</bean>
	
	<!-- 配置SessionFactory org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean  -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean"><!-- org.springframework.orm.hibernate4.LocalSessionFactoryBean -->
		<property name="dataSource" ref="dataSource" />   
		<property name="hibernateProperties">   
			<props>   
			    <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>   
			    <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>  
			    <prop key="hibernate.hbm2ddl.auto">update</prop> 
			    <prop key="hibernate.show_sql">true</prop>
			    <prop key="hibernate.format_sql">true</prop> 
			    <prop key="hibernate.jdbc.batch_size">20</prop> 
			</props>   
		</property>   
  		<property name="packagesToScan">   
			<list>   
				<value>com.entity</value><!-- 扫描实体类，也就是平时所说的model -->
				<!-- <value>com.entity.web.pojo</value>扫描实体类，也就是平时所说的model   
				<value>com.entity.web.monitor</value>扫描实体类，也就是平时所说的model 
				<value>com.entity.web.ewe</value>扫描实体类，也就是平时所说的model
				<value>com.entity.sys.cache</value>扫描实体类，也就是平时所说的model -->
			</list>   
		</property>   
	</bean>  
	
	   <!-- 初始化hibernatetemplate    -->
     <bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
         <property name="sessionFactory" ref="sessionFactory" />
     </bean>
	
	
	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">   
		<property name="sessionFactory" ref="sessionFactory" />   
	</bean>
	
	<!-- 定义文件解释器（文件上传） -->  
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">        
		<!--设置默认编码   -->     
		<property name="defaultEncoding" value="utf-8"></property>      
		<!-- 上传图片最大大小1M     -->   
		<property name="maxUploadSize" value="1048576"></property>    
	</bean> 

	<tx:annotation-driven transaction-manager="transactionManager" />
	
     
     <aop:config proxy-target-class="true">
         <aop:pointcut id="interceptorPointCuts"
             expression="execution(* com.service.*.*(..))" />
         <aop:advisor advice-ref="txAdvice"
             pointcut-ref="interceptorPointCuts" />        
     </aop:config>  
     
     <tx:advice id="txAdvice" transaction-manager="transactionManager">
         <tx:attributes>
            
             <tx:method name="add*" rollback-for="Exception"/>
             <tx:method name="save*" rollback-for="Exception"/>
             <tx:method name="edit*" rollback-for="Exception"/>
             <tx:method name="update*" rollback-for="Exception"/>
             <tx:method name="del*" rollback-for="Exception"/>
             <tx:method name="find*" read-only="true"/>
             <tx:method name="get*" read-only="true"/>
             <tx:method name="load*" read-only="true"/>
             <tx:method name="list*" read-only="true"/>
             <tx:method name="*" propagation="REQUIRED" />  
         </tx:attributes>
     </tx:advice>   
	
	
	<!-- 配置axis2交给spring管理，该配置必须存在
	<bean id="applicationContext"
class="org.apache.axis2.extensions.spring.receivers.ApplicationContextHolder" />
<bean id="bizService" class="com.service.BizService"></bean>
 -->

	
</beans>